// TO DO:
// This files contains quickly pasted code snippets that solve
// poorly documented issues - if at all.
// This file should ideally be empty

rm pw & ph


callback types:

/**
 * Callback function that fires when the value of a ValuedController is set.
 *
 * @callback ValueCallback
 * @param {Controller} controller
 * @param {*} value
 */

/**
 * Callback function that fires when the setup() method of a Controller is called.
 *
 * @callback SetupCallback
 * @param {Controller} controller
 */

=> use
	 * @param {ValueCallback} valueCallback
	 * @param {SetupCallback} [setupCallback]




"crementer"?/**
 * Side by side incrementer & decrementer button for a number
 * @extends ValuedController
 */
class Crementer extends ValuedController {
	/**
	 * Crementer constructor
	 * @param {GUIForP5} gui
	 * @param {string} name
	 * @param {string} labelStr
	 * @param {number} minVal
	 * @param {number} maxVal
	 * @param {number} defaultVal
	 * @param {number} stepSize
	 * @param {ValueCallback} valueCallback
	 * @param {SetupCallback} [setupCallback]
	 */
	constructor(
		gui,
		name,
		labelStr,
		minVal,
		maxVal,
		defaultVal,
		stepSize,
		valueCallback,
		setupCallback = undefined
	) {
		super(gui, name, labelStr, setupCallback);
		this.minVal = minVal;
		this.maxVal = maxVal;
		this.defaultVal = defaultVal;
		this.stepSize = stepSize;
		this.valueCallback = valueCallback;

		this.controllerElement = createDiv();
		this.controllerElement.class('crementer');
		this.controllerElement.parent(this.controllerWrapper);

		const minusButton = createButton('&#xE1D2'); // left arrow
		minusButton.parent(this.controllerElement);
		minusButton.elt.onclick = () => this.decrement();

		this.valueDisplay = createSpan(defaultVal);
		this.valueDisplay.parent(this.controllerElement);

		const plusButton = createButton('&#x2192'); // right arrow
		plusButton.parent(this.controllerElement);
		plusButton.elt.onclick = () => this.increment();

		this.setValue(defaultVal);
	}

	increment() {
		this.setValue(min(this.value + this.stepSize, this.maxVal));
	}

	decrement() {
		this.setValue(max(this.value - this.stepSize, this.minVal));
	}

	setValue(value) {
		this.value = constrain(value, this.minVal, this.maxVal);
		this.valueDisplay.html(this.value);
		this.valueCallback(this, this.value);
		if (this.doUpdateChangeSet()) changeSet.save();
	}

	randomize() {
		let randomValue = random(this.minVal, this.maxVal);
		randomValue = round(randomValue / this.stepSize) * this.stepSize;
		this.setValue(randomValue);
	}
}

crementer style:

.crementer {
	display: flex;
	width: 100%;
	align-items: center;
}
.crementer > * {
	width: 100%;
}
.crementer span {
	height: var(--base-height);
	background-color: var(--base-col);
	color: var(--text-col-on-base);
	display: flex;
	align-items: center;
	justify-content: center;
}
#gui .crementer button {
	text-align: center;
}


style:
"#gui button {" => "button {"

//sketch.js
/** @type {Generator} */
let generator;
/** @type {GUIForP5} */
let gui;