// TO DO:
// This files contains quickly pasted code snippets that solve
// poorly documented issues - if at all.
// This file should ideally be empty

rm pw & ph


callback types:

/**
 * Callback function that fires when the value of a ValuedController is set.
 *
 * @callback ValueCallback
 * @param {Controller} controller
 * @param {*} value
 */

/**
 * Callback function that fires when the setup() method of a Controller is called.
 *
 * @callback SetupCallback
 * @param {Controller} controller
 */

=> use
	 * @param {ValueCallback} valueCallback
	 * @param {SetupCallback} [setupCallback]




"crementer"?
class Crementer extends ValuedController {
	/**
	 * Crementer constructor
	 * @param {GUIForP5} gui
	 * @param {string} name
	 * @param {string} labelStr
	 * @param {number} minVal
	 * @param {number} maxVal
	 * @param {number} defaultVal
	 * @param {number} stepSize
	 * @param {ValueCallback} valueCallback
	 * @param {SetupCallback} [setupCallback]
	 */
	constructor(
		gui,
		name,
		labelStr,
		minVal,
		maxVal,
		defaultVal,
		stepSize,
		valueCallback,
		setupCallback = undefined
	) {
		super(gui, name, labelStr, setupCallback);
		this.minVal = minVal;
		this.maxVal = maxVal;
		this.defaultVal = defaultVal;
		this.stepSize = stepSize;
		this.valueCallback = valueCallback;

		this.controllerElement = createDiv();
		this.controllerElement.class('crementer');
		this.controllerElement.parent(this.controllerWrapper);

		const minusButton = createButton('-');
		minusButton.parent(this.controllerElement);
		minusButton.elt.onclick = () => this.decrement();

		this.valueDisplay = createSpan(defaultVal);
		this.valueDisplay.parent(this.controllerElement);

		const plusButton = createButton('+');
		plusButton.parent(this.controllerElement);
		plusButton.elt.onclick = () => this.increment();

		this.setValue(defaultVal);
	}

	increment() {
		let newValue = this.value + this.stepSize;
		if (newValue > this.maxVal) newValue = this.maxVal;
		this.setValue(newValue);
	}

	decrement() {
		let newValue = this.value - this.stepSize;
		if (newValue < this.minVal) newValue = this.minVal;
		this.setValue(newValue);
	}

	setValue(value) {
		if (value < this.minVal || value > this.maxVal) {
			throw new Error(
				`Value ${value} out of bounds [${this.minVal}, ${this.maxVal}]`
			);
		}
		this.value = value;
		this.valueDisplay.html(value);
		this.valueCallback(this, value);
		if (this.doUpdateChangeSet()) changeSet.save();
	}

	randomize() {
		let randomValue = random(this.minVal, this.maxVal);
		randomValue = round(randomValue / this.stepSize) * this.stepSize;
		this.setValue(randomValue);
	}
}
